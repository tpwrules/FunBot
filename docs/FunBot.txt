FUNBOT DOCUMENTATION
--------------------
This contains all the stuff needed to set up and operate your very own FunBot!

Table of Contents
-----------------
1. Setting up FunBot
1.1 Prerequisites
1.2 File locations
1.3 FunBot.ini
1.3.1 Layout
1.3.2 config values
1.3.3 channel section values
1.4 Users database

2. Adding FunBot plugins

3. FunBot commands
3.1 User commands
3.2 God commands
3.3 Game info commands
3.4 Gameplay commands

[1] Setting up FunBot
---------------------
Welcome to FunBot! FunBot is an interactive IRC bot to add a variety of games to any IRC channel!

[1.1] Prerequisites
-------------------
You must have Python 2.6 installed on your system.

[1.2] File locations
--------------------
The FunBot files can go in any directory, as long as they are together. FunBot.ini and Funbot.py must be in the same directory, along with games. The games directory contains all the FunBot game plugins as well as an __init__.py.

[1.3] FunBot.ini
----------------
FunBot.ini is a standard .ini that keeps track of FunBot settings and the channels FunBot is in.

[1.3.1] Layout
--------------
FunBot.ini must contain at least one section: the config section. This contains channel lists, the nick, server info, and other stuff.

[1.3.2] config values
---------------------
channels: Comma-separated list of channel sections that FunBot needs to read from.

nick: FunBot's current nick.

prefix: FunBot's current global prefix character.

server: IRC server to connect to, only one at a time is supported.

port: IRC server port.

pass (optional): Server password

userfile: User database file.

godusers: Comma-separated list of usernames that are 'god' and can access admin commands.

[1.3.3] channel section values
------------------------------
channel: The name of the channel to connect to.

key (optional): The channel keyword

prefix (optional): The prefix for this channel only. If not specified, the global prefix is used.

games (optional): Comma-separated list of games allowed in the channel. If omitted, all games are allowed.

[1.4] Users database
--------------------
This file contains a pickled representation of the user database. The bot will not load if it is not found. This file should not be modified.

[2] Adding FunBot Plugins
-------------------------
Note: Some knowledge of Python is expected here.

Step 1. Quit FunBot
Step 2. Copy the game plugin into the games directory.
Step 3. Open up FunBot.py in your favorite text editor.
Step 4. Add your game under the game imports header. This should be in the form of 'from games import <game file minus .py>'
Step 5. Add a new entry to the plugin dictionary, with the key being the gamename and the value being the module. Entries should be in the form of '<game module>.__gamename__:<game module>'. Entries are separated by a comma.
Step 6. Relaunch FunBot.

[3] FunBot Commands
-------------------
This section details the operation of FunBot. FunBot's channel command prefix is set in the config file.

[3.1] User Commands
-------------------
These commands are used for managing users. All of them should be sent in PM, with no channel command prefix.

register <user> <pass>: Register user 'user' with password 'pass'.

login <user> <pass>: Log in as user 'user' and use password 'pass'.

logout: Log out.

[3.2] God Commands
------------------
These commands can only be used by the 'gods'. If a non-god user tries to access them, they act as if nothing happened. These should be sent in PM, with no channel command prefix.

quote: Send all the data after the quote command raw to the server.

reload <game>: Reload the game's plugin.

[3.3] Game Info Commands
------------------------
These commands can be sent either in PM or on the channel.

help <game>: Shows the help text for game.

stats <gamename> [user]: Shows the stats for gamename for the user issuing the command. If user is specified, shows the stats for that user instead of the one issuing the command.

list: Lists all games currently loaded in FunBot.

[3.4] Gameplay Commands
-----------------------
These commands are used to administer gameplay. You must be logged in to use them.

play <gamename>: Starts the join process for gamename.

stop: Stops the current game.

start: Starts gameplay after everybody has joined.

join: Join the current game.
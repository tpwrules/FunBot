FunBot Plugin Documentation
___________________________

Want to write your own FunBot game? You've come to the right place! FunBot games are standard Python modules, with specific functions to interact with the FunBot core.

Plugin Limitations
__________________

Because of the way FunBot works, plugins have their limits. First, because FunBot is not multithreaded, you can't take too long in the plugin routines  because it will make other games wait and FunBot will not be responsive. Second, exceptions aren't handled very gracefully. If your plugin generates an exception, the game will automatically halt, and FunBot might be forced to quit entirely.

The Way Plugins Work
____________________

As stated earlier, plugins are standard python modules. Plugins must have a few global variables which tells FunBot about the contents of the plugin, some initialization routines, and a class that represents an instance of the game.

Plugins are allowed to store data about users, such as score and other data, whatever the plugin wants. This data is stored by user and game.

Plugin Global Variables
_______________________

This is a list of global variables required in a plugin for it to be properly handled. If these are not defined, the bot could crash.

__gamename__
This variable contains the name of the game. It cannot have any spaces.

__helptext__
This is the data displayed when !help <game> is issued. Lines are separated by \n

__players__
This is an integer containing the minimum number of players required to play the game.

Plugin Functions
________________

These functions are used to do certain things to initialize the plugin and stuff. These functions are required. If these generate exceptions, the plugin be stopped.

def start(irc, options)
This function is supposed to create a class representing a game instance and return the instance. The irc parameter is a class that manages talking to IRC and storing/retrieving the bot's data. The options parameter is an array containing the data after the !play <game> command.

def disp_stats(irc, userdata)
This function is called to display the stats for a specific user. The irc parameter can be used for sending the data and the userdata parameter is the user data to be parsed.

Plugin Class
____________

This class is the one instantiated and returned by the start method. It is an instance of the game and has various functions that handle game events.

def join(user)
This is called when the user in the user parameter is joining the game.

def start()
This is called when gameplay is to be started, ie. this function is called when the !start command is called.

def stop()
This is called when gameplay needs to forcefully be ended, ie. this is called when the !stop command is issued.

def handlecmd(cmd, args, user, nick)
This function is responsible for handling all commands that are not global. The cmd argument is the command, the args argument is an array of the space-separated arguments that came after the command, user is the user that called the commmand, nick is the nick that called the command.

The Irc Class
_____________

This class is passed to functions as a portal to the channel/user that the plugin should be talking to.

Important Variables (Others shouldn't be touched)
_dest: contains the channel/nick that the class is pointing to currently

Functions

send(data)
Sends the data in the data parameter to the current destination.

notice(nick, data)
Sends a notice containing data to nick.

quote(data)
Sends the raw data to the IRC server, appending a CR+LF. Please use sparingly and be careful, as damage can be done.

getuserdata(user)
Returns the user data for user.

setuserdata(user, data)
Sets the userdata contained in user to data.

getnick(user)
Gets the current nick that user is using.

End
___

This SHOULD be all that's needed to write your very own FunBot game! Installing it into the bot is covered in the main FunBot doc, FunBot.txt.